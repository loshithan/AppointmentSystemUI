@using AppointmentUI.Components.Domain
@using System.Net.Http.Headers
@using AppointmentUI.Components.Services
@inject NavigationManager Navigation
@inject IConfiguration Configuration
@inject IHttpClientFactory HttpClientFactory
@inject AccessTokenService AccessTokenService
@code {
    [Parameter]
    public string? DoctorName { get; set; }

    public List<ProfessionalAvailability> Sessions { get; set; } = new List<ProfessionalAvailability>();

    protected override async Task OnInitializedAsync()
    {
        var Http = HttpClientFactory.CreateClient("ApiClient");

        try
        {
            var token = await AccessTokenService.GetTokenAsync();
            // Create an HttpRequestMessage
            var request = new HttpRequestMessage(HttpMethod.Get, $"ProfessionalAvailability/professionals?DoctorName={DoctorName}");

            // Add the Authorization header if the token exists
            if (!string.IsNullOrEmpty(token))
            {
                request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
            }
            // Send the request
            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                // Read and parse the response
                var result = await response.Content.ReadFromJsonAsync<List<DoctorWithAvailabilitiesDto>>();
                Sessions = result?.SelectMany(d => d.Availabilities).ToList() ?? new List<ProfessionalAvailability>();

            }
            else
            {
                // Handle API errors (e.g., unauthorized or server errors)
                Console.WriteLine($"API request failed: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            // Handle errors (e.g., log or display a message)
            Console.WriteLine($"Error fetching professional availabilities: {ex.Message}");
        }
        @* var baseUrl = Configuration["ApiSettings:BaseUrl"];
        var apiUrl = $"{baseUrl}/api/ProfessionalAvailability/professionals?DoctorName={DoctorName}";

        try
        {
            var result = await Http.GetFromJsonAsync<List<DoctorWithAvailabilitiesDto>>(apiUrl);
            Sessions = result?.SelectMany(d => d.Availabilities).ToList() ?? new List<ProfessionalAvailability>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching doctors: {ex.Message}");
        } *@
    }

    // Group sessions by HospitalName
    private Dictionary<string, List<ProfessionalAvailability>> GetGroupedSessions()
    {
        return Sessions
        .GroupBy(s => s.HospitalName) // Group by HospitalName
        .ToDictionary(g => g.Key, g => g.ToList()); // Convert to Dictionary
    }
}

<!-- Dynamically generate accordion items for each hospital -->
@foreach (var hospitalGroup in GetGroupedSessions())
{
    var hospitalName = hospitalGroup.Key;
    var hospitalSessions = hospitalGroup.Value;
    var index = GetGroupedSessions().Keys.ToList().IndexOf(hospitalName) + 1; // Unique index for each hospital

    <div class="border-b border-slate-200">
        <button onclick="toggleAccordion(@index)" class="w-full flex justify-between items-center py-5 text-slate-800">
            <span class="text-[#5333ed] text-2xl font-bold">@hospitalName</span>
            <span id="icon-@index" class="text-slate-800 transition-transform duration-300">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor" class="w-4 h-4">
                    <path
                        d="M8.75 3.75a.75.75 0 0 0-1.5 0v3.5h-3.5a.75.75 0 0 0 0 1.5h3.5v3.5a.75.75 0 0 0 1.5 0v-3.5h3.5a.75.75 0 0 0 0-1.5h-3.5v-3.5Z" />
                </svg>
            </span>
        </button>
        <div id="content-@index" class="max-h-0 overflow-hidden transition-all duration-300 ease-in-out">
            @if (hospitalSessions.Count == 0)
            {
                <p class="text-red-500">No sessions available for @DoctorName at @hospitalName</p>
            }
            else
            {
                @foreach (var session in hospitalSessions)
                {
                    <AvailableSessionCard Session="@session" DoctorName="@DoctorName" />
                }
            }
        </div>
    </div>
}

<script>
    function toggleAccordion(index) {
        const content = document.getElementById(`content-${index}`);
        const icon = document.getElementById(`icon-${index}`);

        // SVG for Minus icon
        const minusSVG = `
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor" class="w-4 h-4">
                <path d="M3.75 7.25a.75.75 0 0 0 0 1.5h8.5a.75.75 0 0 0 0-1.5h-8.5Z" />
            </svg>
        `;

        // SVG for Plus icon
        const plusSVG = `
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor" class="w-4 h-4">
                <path d="M8.75 3.75a.75.75 0 0 0-1.5 0v3.5h-3.5a.75.75 0 0 0 0 1.5h3.5v3.5a.75.75 0 0 0 1.5 0v-3.5h3.5a.75.75 0 0 0 0-1.5h-3.5v-3.5Z" />
            </svg>
        `;

        // Toggle the content's max-height for smooth opening and closing
        if (content.style.maxHeight && content.style.maxHeight !== '0px') {
            content.style.maxHeight = '0';
            icon.innerHTML = plusSVG;
        } else {
            content.style.maxHeight = content.scrollHeight + 'px';
            icon.innerHTML = minusSVG;
        }
    }
</script>