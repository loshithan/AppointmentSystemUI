@using AppointmentUI.Components.Domain
@using AppointmentUI.Components.Services
@using Microsoft.AspNetCore.WebUtilities
@using System.Net.Http.Headers
@inject HttpClient Http
@inject IConfiguration Configuration
@inject NavigationManager Navigation
@inject UserService UserService
@inject AccessTokenService AccessTokenService
@inject IHttpClientFactory HttpClientFactory
@inject ISnackbar Snackbar
<MudDialog MaxWidth="MaxWidth.Medium" FullWidth="true">
    <TitleContent>
        <p class="text-3xl font-bold">Booking</p> <!-- Increased font size -->
    </TitleContent>
    <DialogContent>
        <form>
            <div class="flex flex-col gap-6 p-6"> <!-- Increased padding and gap -->
                <p>Do you want to Confirm booking?</p>
                @* <div class="flex-1">
                    <label class="block text-gray-700 text-lg font-bold mb-3" for="doctorName"> <!-- Increased font size -->
                        Patient name
                    </label>
                    <input
                        class="shadow appearance-none border rounded w-full py-3 px-4 text-gray-700 leading-tight focus:outline-none focus:shadow-outline text-lg" 
                        id="username" type="text" placeholder="Patient name">
                </div>
                <div class="flex-1">
                    <label class="block text-gray-700 text-lg font-bold mb-3" for="specialization"> <!-- Increased font size -->
                        NIC number
                    </label>
                    <input
                        class="shadow appearance-none border rounded w-full py-3 px-4 text-gray-700 leading-tight focus:outline-none focus:shadow-outline text-lg" 
                        id="username" type="text" placeholder="NIC number">
                </div> *@
            </div>
        </form>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="Submit">Booking now</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Secondary">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    [Parameter]
    public Guid SessionId { get; set; } // Parameter to receive Session ID

    private string PatientId { get; set; }
    private string ProfessionalId { get; set; }

    protected override async Task OnInitializedAsync()
    {

        var uri = new Uri(Navigation.Uri);
        var queryParams = QueryHelpers.ParseQuery(uri.Query);

        if (queryParams.TryGetValue("doctorId", out var doctorId))
        {
            ProfessionalId = doctorId;
        }

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var patientId = await UserService.GetUserIdAsync();
        PatientId = patientId;

    }
    private async Task Submit()
    {
        var Http = HttpClientFactory.CreateClient("ApiClient");
        var token = await AccessTokenService.GetTokenAsync();

        if (!string.IsNullOrEmpty(token))
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        }

        try
        {
            // Update ProfessionalAvailability to mark as booked
            var editResult = await Http.PutAsJsonAsync($"ProfessionalAvailability/{SessionId}", new ProfessionalAvailability
            {
                Id = SessionId,
                IsBooked = true
            });

            if (!editResult.IsSuccessStatusCode)
            {
                Snackbar.Add("Failed to book appointment", Severity.Error);
                Console.WriteLine($"Failed to update availability: {editResult.StatusCode}");
                return;
            }

            // Create Appointment
            var result = await Http.PostAsJsonAsync("Appointment", new Appointment
            {
                PatientId = PatientId,
                ProfessionalId = ProfessionalId,
                AppointmentDate = DateTime.Now,
                CreatedAt = DateTime.Now,
                Status = AppointmentStatus.Pending,
                ProfessionalAvailabilityId = SessionId
            });

            if (result.IsSuccessStatusCode)
            {
                Snackbar.Add("Appointment created successfully", Severity.Success);
                Console.WriteLine("Appointment created successfully");
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                Console.WriteLine($"Failed to create appointment: {result.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error processing request: {ex.Message}");
        }
    }
    private void Cancel() => MudDialog.Cancel();
}
