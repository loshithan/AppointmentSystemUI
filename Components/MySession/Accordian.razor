@page "/professional-availabilities"
@using AppointmentUI.Components.Domain
@using AppointmentUI.Components.Services
@using System.Net.Http.Headers
@inject IConfiguration Configuration
@inject IHttpClientFactory HttpClientFactory
@inject AccessTokenService AccessTokenService

@code {
    
    public List<ProfessionalAvailability> ProfessionalAvailabilities { get; set; } = new List<ProfessionalAvailability>();

    protected override async Task OnInitializedAsync()
    {
        var Http = HttpClientFactory.CreateClient("ApiClient");

        try
        {
            var token = await AccessTokenService.GetTokenAsync();
            // Create an HttpRequestMessage
            var request = new HttpRequestMessage(HttpMethod.Get, "ProfessionalAvailability");

            // Add the Authorization header if the token exists
            if (!string.IsNullOrEmpty(token))
            {
                request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
            }
             // Send the request
            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                // Read and parse the response
                ProfessionalAvailabilities = await response.Content.ReadFromJsonAsync<List<ProfessionalAvailability>>();
            }
            else
            {
                // Handle API errors (e.g., unauthorized or server errors)
                Console.WriteLine($"API request failed: {response.StatusCode}");
            }
     }
        catch (Exception ex)
        {
            // Handle errors (e.g., log or display a message)
            Console.WriteLine($"Error fetching professional availabilities: {ex.Message}");
        }
    }

    // Group ProfessionalAvailabilities by HospitalName
    private IEnumerable<IGrouping<string, ProfessionalAvailability>> GetGroupedProfessionalAvailabilities()
    {
        return ProfessionalAvailabilities
            .GroupBy(pa => pa.HospitalName ?? "Unknown Hospital")
            .OrderBy(g => g.Key);
    }
}

<!-- Accordion Component -->
@foreach (var group in GetGroupedProfessionalAvailabilities())
{
    <div class="border-b border-slate-200">
        <button onclick="toggleAccordion('@group.Key')" class="w-full flex justify-between items-center py-5 text-slate-800">
            <span class="text-[#5333ed] text-2xl font-bold">@group.Key</span>
            <span id="icon-@group.Key" class="text-slate-800 transition-transform duration-300">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor" class="w-4 h-4">
                    <path d="M8.75 3.75a.75.75 0 0 0-1.5 0v3.5h-3.5a.75.75 0 0 0 0 1.5h3.5v3.5a.75.75 0 0 0 1.5 0v-3.5h3.5a.75.75 0 0 0 0-1.5h-3.5v-3.5Z" />
                </svg>
            </span>
        </button>
        <div id="content-@group.Key" class="max-h-0 overflow-hidden transition-all duration-300 ease-in-out">
            @foreach (var availability in group)
            {
                <DoctorCard Index="@((group.ToList().IndexOf(availability)+1).ToString("D2"))" Availability="availability" />
            }
        </div>
    </div>
}

<script>
    function toggleAccordion(key) {
        const content = document.getElementById(`content-${key}`);
        const icon = document.getElementById(`icon-${key}`);

        // SVG for Minus icon
        const minusSVG = `
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor" class="w-4 h-4">
                <path d="M3.75 7.25a.75.75 0 0 0 0 1.5h8.5a.75.75 0 0 0 0-1.5h-8.5Z" />
            </svg>
        `;

        // SVG for Plus icon
        const plusSVG = `
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor" class="w-4 h-4">
                <path d="M8.75 3.75a.75.75 0 0 0-1.5 0v3.5h-3.5a.75.75 0 0 0 0 1.5h3.5v3.5a.75.75 0 0 0 1.5 0v-3.5h3.5a.75.75 0 0 0 0-1.5h-3.5v-3.5Z" />
            </svg>
        `;

        // Toggle the content's max-height for smooth opening and closing
        if (content.style.maxHeight && content.style.maxHeight !== '0px') {
            content.style.maxHeight = '0';
            icon.innerHTML = plusSVG;
        } else {
            content.style.maxHeight = content.scrollHeight + 'px';
            icon.innerHTML = minusSVG;
        }
    }
</script>   