@page "/"
@using AppointmentUI.Components.Common
@using AppointmentUI.Components.Domain
@using AppointmentUI.Components.Services
@using System.Net.Http.Headers
@using static System.Net.WebRequestMethods
@inject IHttpClientFactory HttpClientFactory
@inject IConfiguration Configuration
@inject AccessTokenService AccessTokenService
@inject UserService UserService
@attribute [Authorize]

<PageTitle>Home</PageTitle>

@code {
  List<ApplicationUser> doctors = new List<ApplicationUser>();
    public string UserName { get; set; }
  private bool _isInitialized = false; // Track initialization state

  protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_isInitialized)
        {
            _isInitialized = true; // Prevent multiple calls
            UserName = await UserService.GetUserNameAsync();
            await LoadDoctorsAsync(); // Call the API after prerendering
            StateHasChanged(); // Force UI refresh
        }
    }

    private async Task LoadDoctorsAsync()
    {
        var Http = HttpClientFactory.CreateClient("ApiClient");
        var token = await AccessTokenService.GetTokenAsync();

        if (!string.IsNullOrEmpty(token))
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        }

        var response = await Http.GetAsync("ProfessionalAvailability/professionals");
        if (response.IsSuccessStatusCode)
        {
            var doctorData = await response.Content.ReadFromJsonAsync<List<DoctorWithAvailabilitiesDto>>();
            if (doctorData != null)
            {
                doctors = doctorData.Select(d => d.Doctor).ToList();
            }
        }
        else
        {
            Console.WriteLine($"API request failed: {response.StatusCode}");
        }
    }
}

<h1 class="text-4xl font-bold text-gray-900 mt-5">Hello, @UserName !</h1>
<AuthorizeView>
  <form class="bg-[#dbd9d999] shadow-md rounded px-3 pt-6 pb-8 mb-4 mt-5">
    <div class="flex flex-row gap-3">
      <div class="flex-1">
        <label class="block text-gray-700 text-sm font-bold mb-2" for="doctorName">
          Doctor name
        </label>
        <input
          class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
          id="username" type="text" placeholder="Doctor name">
      </div>
      <div class="flex-1">
        <label class="block text-gray-700 text-sm font-bold mb-2" for="specialization">
          Specialization
        </label>
        <input
          class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
          id="username" type="text" placeholder="Specialization">
      </div>
      <div class="flex-1">
        <label class="block text-gray-700 text-sm font-bold mb-2" for="hospital">
          Hospital
        </label>
        <input
          class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
          id="username" type="text" placeholder="Hospital">
      </div>
      <div class="flex-1">
        <label class="block text-gray-700 text-sm font-bold mb-2" for="date">
          Date
        </label>
        <input
          class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
          id="username" type=" date" placeholder="DD/MM/YYYY">
      </div>
      <div class="flex flex-1 items-end justify-between pt-4">
        <Button>Search</Button>


      </div>
    </div>
  </form>
  <hr class=" mt-[50px]">
  <div class="flex flex-wrap flex-row" style="gap: 16px;">
    @{
      foreach (var doctor in doctors)
      {
        <DoctorProfileCard doctor="@doctor" />
      }
    }
  </div>
</AuthorizeView>