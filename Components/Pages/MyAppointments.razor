@page "/appointments"
@rendermode InteractiveServer
@inject HttpClient Http
@inject IConfiguration Configuration
@using AppointmentUI.Components.Domain;
@using AppointmentUI.Components.Services
@using System.Net.Http.Headers
@inject UserService UserService
@inject AccessTokenService AccessTokenService
@inject IHttpClientFactory HttpClientFactory

@code {

  public List<Appointment> Appointments { get; set; } = new List<Appointment>();
     public string DoctorName { get; set; } = string.Empty;
    public string Specialization { get; set; } = string.Empty;
    public string Hospital { get; set; } = string.Empty;
    public DateTime? SelectedDate { get; set; }
  // Use the Appointment class from the Domain namespace

  public async Task ApplyFilters()
  {
    var Http = HttpClientFactory.CreateClient("ApiClient");
    var token = await AccessTokenService.GetTokenAsync();

    if (!string.IsNullOrEmpty(token))
    {
      Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
    }

    try
    {
      // Fetch data from the API
      var appointments = await Http.GetFromJsonAsync<List<Appointment>>($"Appointment?DoctorName={DoctorName}&Specialization={Specialization}&Hospital={Hospital}&Date={SelectedDate}");
      Appointments = appointments;

    }
    catch (Exception ex)
    {
      // Handle errors (e.g., log or display a message)
      Console.WriteLine($"Error fetching appointments: {ex.Message}");
    }
  }
  private bool _isRendered = false; // Track if component is fully rendered

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isRendered = true; // Set flag after first render
            await LoadAppointments(); // Fetch appointments after interactivity starts
            StateHasChanged(); // Trigger re-render
        }
    }

    private async Task LoadAppointments()
    {
        if (!_isRendered) return; // Prevent fetching during prerendering

        var Http = HttpClientFactory.CreateClient("ApiClient");
        var token = await AccessTokenService.GetTokenAsync();

        if (!string.IsNullOrEmpty(token))
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        }

        try
        {
            Appointments = await Http.GetFromJsonAsync<List<Appointment>>("Appointment") ?? new List<Appointment>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching appointments: {ex.Message}");
        }
    }
}
<PageTitle>My Appointments</PageTitle>
<h2 class=" text-4xl font-bold mt-5">My Appointments</h2>
<form class="bg-[#dbd9d999] shadow-md rounded px-3 pt-6 pb-8 mb-4 mt-5">
  <div class="flex flex-row gap-3">
        <div class="flex-1">
            <label class="block text-gray-700 text-sm font-bold mb-2" for="doctorName">Doctor Name</label>
            <input class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                   id="doctorName" @bind="DoctorName" type="text" placeholder="Doctor name">
        </div>
        <div class="flex-1">
            <label class="block text-gray-700 text-sm font-bold mb-2" for="specialization">Specialization</label>
            <input class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                   id="specialization" @bind="Specialization" type="text" placeholder="Specialization">
        </div>
        <div class="flex-1">
            <label class="block text-gray-700 text-sm font-bold mb-2" for="hospital">Hospital</label>
            <input class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                   id="hospital" @bind="Hospital" type="text" placeholder="Hospital">
        </div>
        <div class="flex-1">
            <label class="block text-gray-700 text-sm font-bold mb-2" for="date">Date</label>
            <input class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                   id="date" @bind="SelectedDate" type="date">
        </div>
        <div class="flex flex-1 items-end justify-between pt-4">
            <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded" @onclick="ApplyFilters">Search</button>
        </div>
    </div>
</form>
<hr class=" mt-[50px] mb-[50px]">
@* <div class=" flex justify-end gap-3">
  <Button>Add Appointment</Button>

</div> *@
@{
  if (Appointments.Count == 0)
  {
    <p class="text-red-500">No appointments available</p>
  }
  else
  {
    foreach (var appointment in Appointments)
    {
      <AppointmentCard Appointment="appointment" />
    }
  }

}
