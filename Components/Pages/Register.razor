@page "/register"
@layout EmptyLayout
@using System.ComponentModel.DataAnnotations
@using AppointmentUI.Components.Layout
@using BlazorServer.Services
@inject HttpClient Http
@inject IConfiguration Configuration
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@attribute [AllowAnonymous]

@code {
    private RegisterModel registerModel = new();
    private string? errorMessage;
    private List<string> roles = new() { "Patient", "Doctor" };


    public class RegisterModel
    {
        [Required(ErrorMessage = "User name name is required.")]
        public string UserName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email address.")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required.")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters.")]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "Confirm password is required.")]
        [Compare("Password", ErrorMessage = "Passwords do not match.")]
        public string ConfirmPassword { get; set; } = string.Empty;
         public string Role { get; set; } = "Patient";
    }

    private async Task HandleRegister()
    {
      try{
        var status = await AuthService.RegisterAsync(registerModel.UserName, registerModel.Email, registerModel.Password,registerModel.Role);
        if (status)
        {
            Snackbar.Add("Registered successfully!", Severity.Success);
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            Snackbar.Add("Registration failed. Please try again.", Severity.Error);
            errorMessage = "Registration failed. Please try again.";
        }
      }catch(Exception ex){
        Console.WriteLine($"Error registering user: {ex.Message}");
        Snackbar.Add("Registration failed. Please try again.", Severity.Error);
        errorMessage = "Registration failed. Please try again.";
      }
    }
}

<PageTitle>Register</PageTitle>

<div class="min-h-screen flex items-center justify-center p-4">
    <div class="max-w-md w-full bg-white rounded-xl shadow-lg p-8">
        <h2 class="text-2xl font-bold text-gray-900 mb-6 text-center">Register</h2>

        <EditForm Model="@registerModel" FormName="register" OnValidSubmit="HandleRegister" class="space-y-4">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">User Name</label>
                <InputText @bind-Value="registerModel.UserName" class="w-full px-4 py-2 border border-gray-300 rounded-lg" placeholder="First Name" />
                <ValidationMessage For="@(() => registerModel.UserName)" />
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Email</label>
                <InputText @bind-Value="registerModel.Email" class="w-full px-4 py-2 border border-gray-300 rounded-lg" placeholder="your@email.com" />
                <ValidationMessage For="@(() => registerModel.Email)" />
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Password</label>
                <InputText @bind-Value="registerModel.Password" type="password" class="w-full px-4 py-2 border border-gray-300 rounded-lg" placeholder="••••••••" />
                <ValidationMessage For="@(() => registerModel.Password)" />
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Confirm Password</label>
                <InputText @bind-Value="registerModel.ConfirmPassword" type="password" class="w-full px-4 py-2 border border-gray-300 rounded-lg" placeholder="••••••••" />
                <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
            </div>
                     <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Role</label>
                <InputSelect @bind-Value="registerModel.Role" class="w-full px-4 py-2 border border-gray-300 rounded-lg">
                    @foreach (var role in roles)
                    {
                        <option value="@role">@role</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => registerModel.Role)" />
            </div>

            <button type="submit" class="w-full bg-indigo-600 hover:bg-indigo-700 text-white font-medium py-2.5 rounded-lg transition-colors">
                Submit
            </button>
        </EditForm>

        <div class="mt-6 text-center text-sm text-gray-600">
            Already have an account?
            <a href="/login" class="text-indigo-600 hover:text-indigo-500 font-medium">Sign in</a>
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="text-red-600 text-sm mt-4">
                @errorMessage
            </div>
        }
    </div>
</div>
