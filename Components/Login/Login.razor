@using System.ComponentModel.DataAnnotations
@using AppointmentUI.Components.Layout
@using static System.Net.WebRequestMethods
@inject HttpClient Http
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager

@code {
    private LoginModel loginModel = new();
    private string? errorMessage;

    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email address.")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required.")]
        public string Password { get; set; } = string.Empty;

        public bool RememberMe { get; set; }
    }

    private async Task HandleLogin()
    {
        try
        {
            var baseUrl = Configuration["ApiSettings:BaseUrl"];
            if (string.IsNullOrEmpty(baseUrl))
            {
                errorMessage = "API base URL is not configured.";
                return;
            }

            var response = await Http.PostAsJsonAsync($"{baseUrl}/api/Auth/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();

                if (result is not null && !string.IsNullOrEmpty(result.Token))
                {
                    // Store JWT in local storage or authentication state (implement as needed)
                    Console.WriteLine($"Login successful, token: {result.Token}");

                    // Redirect to dashboard
                    NavigationManager.NavigateTo("/");
                }
                else
                {
                    errorMessage = "Invalid response from server.";
                }
            }
            else
            {
                errorMessage = "Invalid email or password.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while logging in. Please try again later.";
            Console.WriteLine($"Login Error: {ex.Message}");
        }
    }

    private class LoginResponse
    {
        public string Token { get; set; } = string.Empty;
    }
}
<div class="max-w-md w-full bg-white rounded-xl shadow-lg p-8">
    <h2 class="text-2xl font-bold text-gray-900 mb-6 text-center">Sign In</h2>

    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <!-- Email Input -->
        <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Email</label>
            <InputText @bind-Value="loginModel.Username"
                class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 outline-none transition-all"
                placeholder="your@email.com" />
            <ValidationMessage For="@(() => loginModel.Username)" />
        </div>

        <!-- Password Input -->
        <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Password</label>
            <InputText @bind-Value="loginModel.Password" type="password"
                class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 outline-none transition-all"
                placeholder="••••••••" />
            <ValidationMessage For="@(() => loginModel.Password)" />
        </div>

        <!-- Remember Me and Forgot Password -->
        <div class="flex items-center justify-between">
            <label class="flex items-center">
                <InputCheckbox @bind-Value="loginModel.RememberMe"
                    class="rounded border-gray-300 text-indigo-600 focus:ring-indigo-500" />
                <span class="ml-2 text-sm text-gray-600">Remember me</span>
            </label>
            <a href="#" class="text-sm text-indigo-600 hover:text-indigo-500">Forgot password?</a>
        </div>

        <!-- Sign In Button -->
        <button type="submit"
            class="w-full bg-indigo-600 hover:bg-indigo-700 text-white font-medium py-2.5 rounded-lg transition-colors">
            Sign In
        </button>
    </EditForm>

    <!-- Sign Up Link -->
    <div class="mt-6 text-center text-sm text-gray-600">
        Don't have an account?
        <a href="/register" class="text-indigo-600 hover:text-indigo-500 font-medium">Sign up</a>
    </div>

    <!-- Error Message -->
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="text-red-600 text-sm mt-4">
            @errorMessage
        </div>
    }
</div>