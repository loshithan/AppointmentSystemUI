@using AppointmentUI.Components.Domain
@using AppointmentUI.Components.Popup
@using AppointmentUI.Components.Services
@using System.Net.Http.Headers
@using System.Net
@using static System.Net.WebRequestMethods
@inject IConfiguration Configuration
@inject HttpClient Http
@inject IDialogService DialogService
@inject IHttpClientFactory HttpClientFactory
@inject AccessTokenService AccessTokenService
@inject ISnackbar Snackbar
@code {
    [Parameter]
    public Appointment Appointment { get; set; }
    private Task DeleteUserAsync()
    {
        var parameters = new DialogParameters<DialogPopup>
        {
        { x => x.ContentText, "Do you  want to delete your appointment?" },
        { x => x.ButtonText, "Delete" },
        { x => x.Color, Color.Error },
        { x => x.Submit, EventCallback.Factory.Create(this, HandleClick) }
        };

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        return DialogService.ShowAsync<DialogPopup>("Delete", parameters, options);
    }
    private async Task HandleClick()
    {
        var Http = HttpClientFactory.CreateClient("ApiClient");
        var token = await AccessTokenService.GetTokenAsync();

        if (!string.IsNullOrEmpty(token))
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        }
        @* var baseUrl = Configuration["ApiSettings:BaseUrl"];
        var apiUrl = $"{baseUrl}/api/Appointment/{Appointment.Id}"; *@
        try
        {
            var response = await Http.DeleteAsync($"Appointment/{Appointment.Id}");
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Appointment deleted successfully", Severity.Success);

            }
            else
            {
                Snackbar.Add("Failed to delete appointment", Severity.Error);
                // Handle failure
            }
            DialogService.Close(null);


        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching appointments: {ex.Message}");
        }
    }
}

<div class="mx-auto my-5">
    <div>
        <h2>@(Appointment?.AppointmentDate.ToString("dd MMM yyyy HH:mm") ?? "N/A")</h2>
    </div>
    <div
        class="flex gap-3 bg-white border border-gray-300 rounded-xl overflow-hidden items-center justify-start mt-5 px-4">

        <div class="relative w-32 h-32 flex-shrink-0">
            <img class="absolute left-0 top-0 w-full h-full object-cover object-center transition duration-50"
                loading="lazy" src="hospital.jpg">
        </div>

        <div class="flex flex-row gap-2 py-2 w-full">
            <div class="flex flex-col gap-1 w-full justify-center">
                <p class="text-xl font-bold w-full">
                    @(Appointment?.ProfessionalAvailability?.HospitalName ?? "N/A")
                </p>
                <p>@(Appointment?.ProfessionalAvailability?.HospitalAddress ?? "N/A")</p>
                <p>@(Appointment?.ProfessionalAvailability?.Specialisation ?? Specialisation.Orthopedics)</p>
            </div>

            <div class="flex flex-col gap-1 w-full justify-center">
                <p class="text-gray-500 w-full">
                    @(Appointment?.ProfessionalAvailability?.StartTime)
                </p>
            </div>

            <div class="flex flex-col gap-1 w-full justify-center">
                <span class="flex items-center justify-start text-gray-500 w-full">
                    Rs @(Appointment?.ProfessionalAvailability?.Price?.ToString() ?? "N/A")
                </span>
                <p>Channel fee</p>
            </div>

            <div class="flex flex-col gap-1 w-50 justify-center">
                <button @onclick="DeleteUserAsync"
                    class="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600 focus:outline-none">
                    Cancel
                </button>
            </div>
        </div>
    </div>
</div>
